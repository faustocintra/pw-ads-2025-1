import * as React from 'react'
// üê® voc√™ vai precisar dos seguintes itens de '../pokemon':
// fetchPokemon: a fun√ß√£o que retorna as informa√ß√µes do pok√©mon
// PokemonInfoFallback: o que √© exibido enquanto as informa√ß√µes do pok√©mon
// s√£o carregadas
// PokemonDataView: o componente usado para exibir as informa√ß√µes do pok√©mon
import { fetchPokemon, PokemonInfoFallback, PokemonDataView, PokemonForm } from '../pokemon'

function PokemonInfo({pokemonName}) {
  // üê® crie o estado para o pok√©mon (null)
  // const [pokemon, setPokemon] = React.useState(null)
  // const [error, setError] = React.useState(null)
  // const [status, setStatus] = React.useState('IDLE')

  // Uma √∫nica vari√°vel de estado de objeto para substituir as tr√™s
  // vari√°veis de estado "avulsas" anteriores
  const [state, setState] = React.useState({
    pokemon: null,
    error: null,
    status: 'IDLE'
  })

  // Para diminuir a quantidade de altera√ß√µes necess√°rias no c√≥digo
  // j√° existente, podemos desestruturar a vari√°vel de estado "state"
  // em vari√°veis individuais somente leitura
  const {
    pokemon,
    error,
    status
  } = state

  React.useEffect(() => {
    console.count('Componente atualizado')
  })

  // üê® crie React.useEffect de modo a ser chamado sempre que pokemonName mudar.
  // üí∞ N√ÉO SE ESQUE√áA DO VETOR DE DEPEND√äNCIAS!
  React.useEffect(() => {
    // üí∞ se pokemonName √© falso (ou uma string vazia) n√£o se preocupe em fazer 
    // a requisi√ß√£o (retorne precocemente).
    if(! pokemonName) return    // Early return (retorno precoce)

    // üê® antes de chamar `fetchPokemon`, limpe o estado atual do pokemon
    // ajustando-o para null.
    // (Isso √© para habilitar o estado de carregamento ao alternar entre diferentes
    // pok√©mon.)
    // setPokemon(null)
    // setError(null)
    // setStatus('IDLE')
    setState({ pokemon: null, error: null, status: 'PENDING' })

    // üí∞ Use a fun√ß√£o `fetchPokemon` para buscar um pok√©mon pelo seu nome:
    //   fetchPokemon('Pikachu').then(
    //     pokemonData => {/* atualize todos os estados aqui */},
    //   )
    // setStatus('PENDING')
    fetchPokemon(pokemonName)
      .then(    // requisi√ß√£o bem-sucedida
        pokemonData => {
          // setPokemon(pokemonData)
          // setStatus('RESOLVED')
          // ...state tira uma c√≥pia da vari√°vel de estado com seus valores
          // correntes antes de atualizar apenas os campos "pokemon" e "status"
          setState({ ...state, pokemon: pokemonData, status: 'RESOLVED' })
        }
      )
      .catch(   // requisi√ß√µes com falha
        error => {
          // setError(error)
          // setStatus('ERROR')
          // "error" √© uma propriedade abreviada (equivalente a "error: error")
          setState({ ...state, error, status: 'ERROR' })
        }
      )
  }, [pokemonName])

  // üê® return the following things based on the `pokemon` state and `pokemonName` prop:
  // üê® retorne o seguinte baseado nos estados `pokemon` e `pokemonName`:
  //   1. n√£o h√° pokemonName: 'Informe um pok√©mon'
  //   2. tem pokemonName mas n√£o pokemon: <PokemonInfoFallback name={pokemonName} />
  //   3. tem pokemon: <PokemonDataView pokemon={pokemon} />
  // if(error) return <div role="alert">
  //     Erro encontrado: <pre style={{ whiteSpace: 'normal' }}>{error.message}</pre>
  //   </div>
  // if(! pokemonName) return 'Informe um pok√©mon'
  // if(pokemonName && !pokemon) return <PokemonInfoFallback name={pokemonName} />
  // if(pokemon) return <PokemonDataView pokemon={pokemon} />
  
  switch(status) {
    case 'IDLE':        // Ocioso, aguardando entrada
      return 'Informe um pok√©mon'
    case 'PENDING':     // Requisi√ß√£o enviada, aguardando resultado
      return <PokemonInfoFallback name={pokemonName} />
    case 'RESOLVED':    // Requisi√ß√£o resolvida com sucesso
      return <PokemonDataView pokemon={pokemon} />
    default:            // ERROR, requisi√ß√£o falhou
      return <div role="alert">
        Erro encontrado: <pre style={{ whiteSpace: 'normal' }}>{error.message}</pre>
      </div>
  }
  
}

function Exercicio06() {
  const [pokemonName, setPokemonName] = React.useState('')

  function handleSubmit(newPokemonName) {
    setPokemonName(newPokemonName)
  }

  return (
    <div className="pokemon-info-app">
      <PokemonForm pokemonName={pokemonName} onSubmit={handleSubmit} />
      <hr />
      <div className="pokemon-info">
        <PokemonInfo pokemonName={pokemonName} />
      </div>
    </div>
  )
}

export default Exercicio06